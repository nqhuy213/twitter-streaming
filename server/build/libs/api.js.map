{"version":3,"sources":["../../src/libs/api.js"],"names":["axios","require","needle","rulesConstructor","twitterStreamUrl","twitterStreamRules","getMyOwnRules","keywords","getRules","existRules","data","toAddRules","myRules","ownRules","addRules","then","res","undefined","err","console","log","getStream","stream","get","headers","Authorization","process","env","TWITTER_TOKEN","rules","length","body","add","twitterApiCall","response","deleteRules","existedRules","values","map","rule","value","ids","includes","push","id","message","method","url","params","options","request","deleteAllRules","meta","result_count","module","exports"],"mappings":"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","sourcesContent":["/** This module is to integrate with Twitter API */\r\nconst axios = require(\"axios\").default;\r\nconst needle = require(\"needle\");\r\nconst { rulesConstructor } = require(\"../libs/utils\");\r\n\r\nconst twitterStreamUrl =\r\n  \"https://api.twitter.com/2/tweets/search/stream?tweet.fields=public_metrics\";\r\nconst twitterStreamRules =\r\n  \"https://api.twitter.com/2/tweets/search/stream/rules\";\r\n\r\n/**Add rules into Twitter API, ignore existing rules */\r\nconst getMyOwnRules = async (keywords) => {\r\n  try {\r\n    let existRules = await getRules();\r\n    existRules = existRules.data ? existRules.data : [];\r\n    /** Add non-existing rules */\r\n    let [toAddRules, myRules] = rulesConstructor(keywords, existRules);\r\n    const ownRules = addRules(toAddRules)\r\n      .then((res) => {\r\n        if (res.data !== undefined) {\r\n          myRules = [...myRules, ...res.data];\r\n          return myRules;\r\n        }\r\n      })\r\n      .catch((err) => console.log(err));\r\n    return ownRules;\r\n  } catch (error) {\r\n    console.log(error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst getStream = () => {\r\n  const stream = needle.get(twitterStreamUrl, {\r\n    headers: { Authorization: `Bearer ${process.env.TWITTER_TOKEN}` },\r\n  });\r\n\r\n  return stream;\r\n};\r\n\r\nconst addRules = async (rules) => {\r\n  try {\r\n    if (rules.length > 0) {\r\n      const body = { add: rules };\r\n      const response = await twitterApiCall(\r\n        \"POST\",\r\n        twitterStreamRules,\r\n        null,\r\n        body\r\n      );\r\n      return response;\r\n    } else {\r\n      return { data: [] };\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst deleteRules = async (rules) => {\r\n  let existedRules = await getRules();\r\n  if (existedRules.data !== undefined) {\r\n    existedRules = existedRules.data;\r\n    const values = rules.map((rule) => rule.value);\r\n    let ids = [];\r\n    for (const rule of existedRules) {\r\n      if (values.includes(rule.value)) {\r\n        ids.push(rule.id);\r\n      }\r\n    }\r\n\r\n    const body = {\r\n      delete: { ids },\r\n    };\r\n    try {\r\n      const response = await twitterApiCall(\r\n        \"POST\",\r\n        twitterStreamRules,\r\n        null,\r\n        body\r\n      );\r\n\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  } else {\r\n    return { message: \"Nothing to delete!\" };\r\n  }\r\n};\r\n\r\nconst getRules = async () => {\r\n  try {\r\n    const response = await twitterApiCall(\"GET\", twitterStreamRules);\r\n    return response;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst twitterApiCall = async (method = \"GET\", url, params, body) => {\r\n  var options = {\r\n    method: method,\r\n    url: url,\r\n    params: params,\r\n    data: body,\r\n    headers: {\r\n      Authorization: `Bearer ${process.env.TWITTER_TOKEN}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  };\r\n  try {\r\n    const response = await axios.request(options);\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\n//delete all the rules in twitter\r\nconst deleteAllRules = async () => {\r\n  let existedRules = await getRules();\r\n  if (existedRules.meta.result_count > 0) {\r\n    existedRules = existedRules.data;\r\n    let ids = [];\r\n    for (const rule of existedRules) {\r\n      ids.push(rule.id);\r\n    }\r\n\r\n    const body = {\r\n      delete: { ids },\r\n    };\r\n\r\n    try {\r\n      const response = await twitterApiCall(\r\n        \"POST\",\r\n        twitterStreamRules,\r\n        null,\r\n        body\r\n      );\r\n\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  getMyOwnRules,\r\n  getStream,\r\n  getRules,\r\n  deleteRules,\r\n  addRules,\r\n  deleteAllRules,\r\n};\r\n"],"file":"api.js"}