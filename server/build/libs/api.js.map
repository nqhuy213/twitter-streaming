{"version":3,"sources":["../../src/libs/api.js"],"names":["axios","require","needle","rulesConstructor","twitterStreamUrl","twitterStreamRules","searchTweets","keywords","getRules","existRules","data","toAddRules","myRules","console","log","ownRules","addRules","then","res","getStream","stream","get","headers","Authorization","process","env","TWITTER_TOKEN","rules","length","body","add","twitterApiCall","response","deleteRules","existedRules","values","map","rule","value","ids","includes","push","id","method","url","params","options","request","module","exports"],"mappings":"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","sourcesContent":["const axios = require(\"axios\").default;\r\nconst needle = require(\"needle\");\r\nconst { rulesConstructor } = require(\"../libs/utils\");\r\n\r\nconst twitterStreamUrl =\r\n  \"https://api.twitter.com/2/tweets/search/stream?tweet.fields=public_metrics\";\r\nconst twitterStreamRules =\r\n  \"https://api.twitter.com/2/tweets/search/stream/rules\";\r\n\r\nconst searchTweets = async (keywords) => {\r\n  try {\r\n    let existRules = await getRules();\r\n    existRules = existRules.data ? existRules.data : [];\r\n    /** Add non-existing rules */\r\n    let [toAddRules, myRules] = rulesConstructor(keywords, existRules);\r\n    console.log(toAddRules);\r\n    const ownRules = addRules(toAddRules).then((res) => {\r\n      myRules = [...myRules, ...res.data];\r\n      return myRules;\r\n    });\r\n    return ownRules;\r\n  } catch (error) {\r\n    console.log(error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst getStream = () => {\r\n  const stream = needle.get(twitterStreamUrl, {\r\n    headers: { Authorization: `Bearer ${process.env.TWITTER_TOKEN}` },\r\n  });\r\n\r\n  return stream;\r\n};\r\n\r\nconst addRules = async (rules) => {\r\n  try {\r\n    if (rules.length > 0) {\r\n      const body = { add: rules };\r\n      const response = await twitterApiCall(\r\n        \"POST\",\r\n        twitterStreamRules,\r\n        null,\r\n        body\r\n      );\r\n      return response;\r\n    } else {\r\n      return { data: [] };\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst deleteRules = async (rules) => {\r\n  let existedRules = await getRules();\r\n  existedRules = existedRules.data;\r\n  const values = rules.map((rule) => rule.value);\r\n  let ids = [];\r\n  for (const rule of existedRules) {\r\n    if (values.includes(rule.value)) {\r\n      ids.push(rule.id);\r\n    }\r\n  }\r\n\r\n  const body = {\r\n    delete: { ids },\r\n  };\r\n  try {\r\n    const response = await twitterApiCall(\r\n      \"POST\",\r\n      twitterStreamRules,\r\n      null,\r\n      body\r\n    );\r\n\r\n    return response;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst getRules = async () => {\r\n  try {\r\n    const response = await twitterApiCall(\"GET\", twitterStreamRules);\r\n    return response;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst twitterApiCall = async (method = \"GET\", url, params, body) => {\r\n  var options = {\r\n    method: method,\r\n    url: url,\r\n    params: params,\r\n    data: body,\r\n    headers: {\r\n      Authorization: `Bearer ${process.env.TWITTER_TOKEN}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  };\r\n  try {\r\n    const response = await axios.request(options);\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nmodule.exports = { searchTweets, getStream, getRules, deleteRules, addRules };\r\n"],"file":"api.js"}