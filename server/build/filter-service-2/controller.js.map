{"version":3,"sources":["../../src/filter-service-2/controller.js"],"names":["require","searchTweets","getRules","deleteRules","addRules","successResponse","errorResponse","Controller","app","req","res","next","body","keywords","socket","ownRules","newStream","db","Stream","rules","save","message","results","data","response","add","error","deleted","module","exports"],"mappings":"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","sourcesContent":["const {\r\n  searchTweets,\r\n  getRules,\r\n  deleteRules,\r\n  addRules,\r\n} = require(\"../libs/api\");\r\nconst { successResponse, errorResponse } = require(\"../libs/utils\");\r\n\r\nclass Controller {\r\n  constructor(app) {\r\n    this.app = app;\r\n  }\r\n\r\n  searchTweets = async (req, res, next) => {\r\n    try {\r\n      const { keywords, socket } = req.body;\r\n      // console.log(keywords);\r\n      const ownRules = await searchTweets(keywords);\r\n\r\n      /** Store the socket with the specific rules */\r\n      const newStream = new this.app.db.Stream({ socket, rules: ownRules });\r\n      await newStream.save();\r\n      successResponse(res, { ownRules });\r\n    } catch (error) {\r\n      errorResponse(res, 500, error.message);\r\n    }\r\n  };\r\n\r\n  getStreamRules = async (req, res, next) => {\r\n    try {\r\n      const rules = await getRules();\r\n      successResponse(res, { results: rules.data ? rules.data : [] });\r\n    } catch (error) {\r\n      errorResponse(res, 500, error.message);\r\n    }\r\n  };\r\n\r\n  addStreamRules = async (req, res, next) => {\r\n    try {\r\n      const { rules } = req.body;\r\n      const response = addRules(rules);\r\n      successResponse(res, { add: response });\r\n    } catch (error) {\r\n      errorResponse(res, 500, error.message);\r\n    }\r\n  };\r\n\r\n  deleteStreamRules = async (req, res, next) => {\r\n    try {\r\n      const { rules } = req.body;\r\n      const response = await deleteRules(rules);\r\n      successResponse(res, { deleted: response });\r\n    } catch (error) {\r\n      errorResponse(res, 500, error.message);\r\n    }\r\n  };\r\n}\r\n\r\nmodule.exports = Controller;\r\n"],"file":"controller.js"}