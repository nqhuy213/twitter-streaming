{"version":3,"sources":["../../src/sync-worker/worker.js"],"names":["require","getRules","addRules","registerDatabase","process","env","NODE_ENV","config","run","app","worker","setInterval","db","Stream","find","allStream","allRules","data","map","r","value","missingRules","stream","rules","rule","includes","push","length","console","log"],"mappings":";;;;;;;;;;;;;;AAAA,eAA+BA,OAAO,CAAC,aAAD,CAAtC;AAAA,IAAQC,QAAR,YAAQA,QAAR;AAAA,IAAkBC,QAAlB,YAAkBA,QAAlB;;AACA,IAAMC,gBAAgB,GAAGH,OAAO,CAAC,mCAAD,CAAhC;;AAEA,IAAII,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;AAC1CN,EAAAA,OAAO,CAAC,QAAD,CAAP,CAAkBO,MAAlB;AACD;AAED;AACA;AACA;;;AACA,SAASC,GAAT,GAAe;AACb,MAAMC,GAAG,GAAG,EAAZ;AACAN,EAAAA,gBAAgB,CAACM,GAAD,CAAhB;AACA,MAAMC,MAAM,GAAGC,WAAW,6FAAC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,iBACrBF,GAAG,CAACG,EADiB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAGCH,GAAG,CAACG,EAAJ,CAAOC,MAAP,CAAcC,IAAd,CAAmB,EAAnB,CAHD;;AAAA;AAGjBC,YAAAA,SAHiB;AAAA;AAAA,mBAKFd,QAAQ,EALN;;AAAA;AAKnBe,YAAAA,QALmB;AAMvBA,YAAAA,QAAQ,GAAGA,QAAQ,CAACC,IAAT,GAAgBD,QAAQ,CAACC,IAAT,CAAcC,GAAd,CAAkB,UAACC,CAAD;AAAA,qBAAOA,CAAC,CAACC,KAAT;AAAA,aAAlB,CAAhB,GAAoD,EAA/D;AACIC,YAAAA,YAPmB,GAOJ,EAPI;AAAA,mDASFN,SATE;;AAAA;AASvB,kEAAgC;AAArBO,gBAAAA,MAAqB;AAAA,wDACXA,MAAM,CAACC,KADI;;AAAA;AAC9B,yEAAiC;AAAtBC,oBAAAA,IAAsB;;AAC/B,wBAAI,CAACR,QAAQ,CAACS,QAAT,CAAkBD,IAAI,CAACJ,KAAvB,CAAL,EAAoC;AAClCC,sBAAAA,YAAY,CAACK,IAAb,CAAkB;AAAEN,wBAAAA,KAAK,EAAEI,IAAI,CAACJ;AAAd,uBAAlB;AACD;AACF;AAL6B;AAAA;AAAA;AAAA;AAAA;AAM/B;AAfsB;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAgBjBlB,QAAQ,CAACmB,YAAD,CAhBS;;AAAA;AAiBvB,gBAAIA,YAAY,CAACM,MAAb,GAAsB,CAA1B,EAA6B;AAC3BC,cAAAA,OAAO,CAACC,GAAR,CAAYR,YAAZ;AACD;;AAnBsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,IAqBvB,IArBuB,CAA1B;AAsBD;;AAEDb,GAAG","sourcesContent":["const { getRules, addRules } = require(\"../libs/api\");\r\nconst registerDatabase = require(\"../libs/database/registerDatabase\");\r\n\r\nif (process.env.NODE_ENV === \"development\") {\r\n  require(\"dotenv\").config();\r\n}\r\n\r\n/** Worker to synchronize streaming rules in Twitter API\r\n * and rules cerated by clients.\r\n */\r\nfunction run() {\r\n  const app = {};\r\n  registerDatabase(app);\r\n  const worker = setInterval(async () => {\r\n    if (app.db) {\r\n      /** Query database */\r\n      const allStream = await app.db.Stream.find({});\r\n      /** Query Twitter rules */\r\n      let allRules = await getRules();\r\n      allRules = allRules.data ? allRules.data.map((r) => r.value) : [];\r\n      let missingRules = [];\r\n\r\n      for (const stream of allStream) {\r\n        for (const rule of stream.rules) {\r\n          if (!allRules.includes(rule.value)) {\r\n            missingRules.push({ value: rule.value });\r\n          }\r\n        }\r\n      }\r\n      await addRules(missingRules);\r\n      if (missingRules.length > 0) {\r\n        console.log(missingRules);\r\n      }\r\n    }\r\n  }, 2000);\r\n}\r\n\r\nrun();\r\n"],"file":"worker.js"}