{"version":3,"sources":["uuid/uuid.js","component/rawTweets/rawTweets.js","component/history/history.js","App.js","reportWebVitals.js","index.js"],"names":["UuidContext","createContext","UuidProvider","props","useState","uuid","setUuid","status","message","error","setError","getRepo","a","axios","then","res","data","catch","err","useEffect","Provider","value","children","RawTweets","keywords","setKeywords","sentimentData","setSentimentData","loading","setLoading","timeDomain","setTimeDomain","seconds","setSeconds","ref","useRef","useContext","handleAdd","socket","socketio","emit","clientId","on","sentiment","prev","includes","createdTime","Array","from","Set","setTimeout","disconnect","close","margin","width","height","tooltip","d3","append","style","formatTime","remove","svg","current","attr","x","domain","Math","min","max","range","y","selectAll","join","enter","d","transition","duration","event","html","tweetId","pageX","pageY","call","node","scale","ticks","length","tickFormat","Container","Form","Group","className","Row","Label","Col","md","isMulti","onChange","newValue","actionMeta","map","val","InputNumber","defaultValue","e","Button","variant","type","onClick","offset","defaultDatasets","labels","datasets","label","backgroundColor","borderColor","borderWidth","History","currentRules","setCurrentRules","setDatasets","rules","setRules","handleChange","url","good","bad","forEach","handleOnClick","SelectPicker","block","App","key","setKey","uuidError","src","alt","Tabs","id","activeKey","onSelect","k","Tab","eventKey","title","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3e4a2adf.chunk.js","sourcesContent":["import { useState, useEffect, createContext } from \"react\";\r\nimport * as axios from \"axios\";\r\n\r\nconst UuidContext = createContext();\r\n\r\nconst UuidProvider = (props) => {\r\n  const url = \"/getUuid\";\r\n  const [uuid, setUuid] = useState(\"\");\r\n  const [error, setError] = useState({ status: false, message: \"\" });\r\n\r\n  const getRepo = async () => {\r\n    await axios\r\n      .get(url)\r\n      .then((res) => setUuid(res.data))\r\n      .catch((err) => setError({ status: true, message: err.data }));\r\n  };\r\n  useEffect(() => {\r\n    getRepo();\r\n  }, [error]);\r\n\r\n  return (\r\n    <UuidContext.Provider value={{ uuid, error }}>\r\n      {props.children}\r\n    </UuidContext.Provider>\r\n  );\r\n};\r\n\r\nexport { UuidContext, UuidProvider };\r\n","import { useState, useContext, useRef, useEffect } from \"react\";\r\nimport { Container, Row, Col, Form, Button } from \"react-bootstrap\";\r\nimport CreatableSelect from \"react-select/creatable\";\r\nimport { Tweet } from \"react-twitter-widgets\";\r\nimport \"./rawTweets.css\";\r\nimport socketio from \"socket.io-client\";\r\nimport { UuidContext } from \"../../uuid/uuid\";\r\nimport { InputNumber } from \"rsuite\";\r\n\r\nimport * as d3 from \"d3\";\r\n\r\n//url\r\n\r\nexport function RawTweets() {\r\n  //states\r\n  const [keywords, setKeywords] = useState([]);\r\n  const [sentimentData, setSentimentData] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [timeDomain, setTimeDomain] = useState([]);\r\n  const [seconds, setSeconds] = useState(5);\r\n  const [error, setError] = useState({ status: false, message: \"\" });\r\n\r\n  //ref for svg\r\n  const ref = useRef();\r\n\r\n  //uuid\r\n  const { uuid } = useContext(UuidContext);\r\n\r\n  //handle change in search bar\r\n  const handleChange = (newValue, actionMeta) => {\r\n    setKeywords(newValue.map((val) => val.value));\r\n  };\r\n\r\n  //handle seconds in time bar\r\n  const handleSecond = (e) => {\r\n    setSeconds(e);\r\n  };\r\n\r\n  //adding rules and emit to the socket\r\n  const handleAdd = () => {\r\n    try {\r\n      const socket = socketio(\"\");\r\n      setLoading(true);\r\n      setError(false);\r\n      socket.emit(\"streaming\", { clientId: uuid, keywords });\r\n      socket.on(\"data\", ({ sentiment }) => {\r\n        setSentimentData((prev) => [...prev, sentiment]);\r\n        if (timeDomain.includes(sentiment.createdTime) === false) {\r\n          setTimeDomain((prev) =>\r\n            Array.from(new Set([...prev, sentiment.createdTime]))\r\n          );\r\n        }\r\n      });\r\n      setTimeout(() => {\r\n        //disconnect socket\r\n        socket.disconnect();\r\n        socket.close();\r\n        setLoading(false);\r\n        return;\r\n      }, seconds * 1000);\r\n    } catch (err) {\r\n      setError(err);\r\n    }\r\n  };\r\n\r\n  const handleClear = () => {\r\n    setSentimentData([]);\r\n    setTimeDomain([]);\r\n  };\r\n\r\n  /** sentiment chart */\r\n  const margin = { top: 10, right: 30, bottom: 30, left: 60 },\r\n    width = 600 - margin.left - margin.right,\r\n    height = 400 - margin.top - margin.bottom;\r\n\r\n  // design tooltip\r\n  const tooltip = d3\r\n    .select(\"body\")\r\n    .append(\"div\")\r\n    .style(\"position\", \"absolute\")\r\n    .style(\"z-index\", \"10\")\r\n    .style(\"visibility\", \"hidden\")\r\n    .style(\"background-color\", \"black\")\r\n    .style(\"border-radius\", \"5px\")\r\n    .style(\"padding\", \"10px\")\r\n    .style(\"color\", \"white\");\r\n\r\n  //format time using d3\r\n  const formatTime = d3.timeFormat(\"%H:%M:%S\");\r\n\r\n  useEffect(() => {\r\n    //if update, make sure to delete old svg\r\n    d3.selectAll(\".svg-container\").remove();\r\n    // create svg container\r\n    const svg = d3\r\n      .select(ref.current)\r\n      .append(\"svg\")\r\n      .attr(\"class\", \"svg-container\")\r\n      .attr(\"width\", width + margin.left + margin.right)\r\n      .attr(\"height\", height + margin.top + margin.bottom)\r\n      .append(\"g\")\r\n      .attr(\"transform\", `translate(${margin.left},${margin.top})`);\r\n\r\n    // Add X axis\r\n    const x = d3\r\n      .scaleLinear()\r\n      .domain([Math.min(...timeDomain) - 500, Math.max(...timeDomain)])\r\n      .range([0, width]);\r\n    const xAxis = () =>\r\n      svg\r\n        .append(\"g\")\r\n        .attr(\"class\", \"xAxis\")\r\n        .attr(\"transform\", `translate(0, ${height})`)\r\n        .transition()\r\n        .duration(500)\r\n        .call(\r\n          d3\r\n            .axisBottom()\r\n            .scale(x)\r\n            .ticks(timeDomain.length)\r\n            .tickFormat(d3.timeFormat(\"%H:%M:%S\"))\r\n        );\r\n\r\n    // Add Y axis\r\n    const y = d3.scaleLinear().domain([-1.0, 1.0]).range([height, 0]);\r\n    const yAxis = () => {\r\n      svg.append(\"g\").attr(\"class\", \"yAxis\").call(d3.axisLeft(y));\r\n    };\r\n\r\n    //design node\r\n    const node = svg\r\n      .append(\"g\")\r\n      .selectAll(\"circle\")\r\n      .data(sentimentData) //get the data\r\n      .join((enter) => {\r\n        return enter\r\n          .append(\"circle\")\r\n          .attr(\"fill\", (d) => {\r\n            return d.sentimentData < 0 ? \"red\" : \"green\";\r\n          })\r\n          .attr(\"stroke-width\", \"1px\")\r\n          .attr(\"stroke\", \"black\")\r\n          .attr(\"cx\", (d) => {\r\n            return x(d.createdTime);\r\n          })\r\n          .attr(\"cy\", (d) => {\r\n            // console.log(d);\r\n            return y(d.sentimentData);\r\n          })\r\n          .attr(\"r\", 5)\r\n          .transition()\r\n          .duration(500);\r\n      });\r\n\r\n    //mouse events for node\r\n    node\r\n      .on(\"mouseover\", (event, d) => {\r\n        tooltip\r\n          .html(\r\n            () =>\r\n              \"tweet id: \" +\r\n              d.tweetId +\r\n              \"<br>\" +\r\n              \"created at: \" +\r\n              formatTime(d.createdTime) +\r\n              \"<br>\" +\r\n              \"sentiment: \" +\r\n              d.sentimentData\r\n          )\r\n          .style(\"visibility\", \"visible\");\r\n      })\r\n      .on(\"mouseout\", (event, d) => {\r\n        tooltip.style(\"visibility\", \"hidden\");\r\n      })\r\n      .on(\"mousemove\", (event) => {\r\n        return tooltip\r\n          .style(\"left\", event.pageX - 100 + \"px\")\r\n          .style(\"top\", event.pageY - 100 + \"px\");\r\n      });\r\n\r\n    const updateChart = () => {\r\n      //update node\r\n      svg.node();\r\n\r\n      //update xAxis\r\n      //update domain\r\n      x.domain([Math.min(...timeDomain) - 500, Math.max(...timeDomain)]).range([\r\n        0,\r\n        width,\r\n      ]);\r\n      xAxis();\r\n    };\r\n\r\n    yAxis();\r\n    updateChart();\r\n\r\n    //update every time if catch new data\r\n  }, [sentimentData, setSentimentData]);\r\n\r\n  return (\r\n    <Container>\r\n      <Form.Group className=\"mb-3\">\r\n        <Row>\r\n          <Form.Label>Adding Rules</Form.Label>\r\n          <Col className=\"col-search-rule\" md={9}>\r\n            <CreatableSelect isMulti onChange={handleChange} />\r\n          </Col>\r\n          <Col md={1} className=\"col-btn-add\">\r\n            <div style={{ width: 100 }}>\r\n              <InputNumber\r\n                defaultValue={5}\r\n                min={0}\r\n                max={60}\r\n                onChange={handleSecond}\r\n              />\r\n            </div>\r\n          </Col>\r\n          <Col md={1} className=\"col-btn-add\">\r\n            <Button\r\n              className=\"btn-add btn-sm\"\r\n              variant=\"primary\"\r\n              type=\"submit\"\r\n              onClick={handleAdd}\r\n            >\r\n              Start\r\n            </Button>\r\n          </Col>\r\n          <Col md={1} className=\"col-btn-add\">\r\n            <Button\r\n              className=\"btn-add btn-sm\"\r\n              variant=\"primary\"\r\n              type=\"submit\"\r\n              onClick={handleClear}\r\n            >\r\n              Clear Tweets\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      </Form.Group>\r\n      <Row>\r\n        <Col md={6}>\r\n          {sentimentData.map((data) => {\r\n            return (\r\n              <Row className=\"justify-content-md-center\">\r\n                <Col md={{ offset: 3 }}>\r\n                  <h3>Tweet ID: {data.tweetId}</h3>\r\n                  <Tweet className=\"tweet\" tweetId={`${data.tweetId}`} />\r\n                </Col>\r\n              </Row>\r\n            );\r\n          })}\r\n          {!loading ? (\r\n            <Button\r\n              className=\"btn-add\"\r\n              variant=\"primary\"\r\n              type=\"submit\"\r\n              onClick={handleAdd}\r\n            >\r\n              Load More\r\n            </Button>\r\n          ) : (\r\n            <div className=\"lds-roller\">\r\n              <div></div>\r\n              <div></div>\r\n              <div></div>\r\n              <div></div>\r\n              <div></div>\r\n              <div></div>\r\n              <div></div>\r\n              <div></div>\r\n            </div>\r\n          )}\r\n        </Col>\r\n        <Col md={6}>\r\n          <svg\r\n            className=\"sentiment-chart\"\r\n            ref={ref}\r\n            width={\"100%\"}\r\n            height={`400px`}\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n","import { useState, useContext } from \"react\";\r\nimport * as axios from \"axios\";\r\nimport { SelectPicker } from \"rsuite\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport { Row, Col } from \"react-bootstrap\";\r\nimport { UuidContext } from \"../../uuid/uuid\";\r\n\r\nconst defaultDatasets = {\r\n  labels: [\"Good\", \"Bad\"],\r\n  datasets: [\r\n    {\r\n      label: \"Sentiment Bar Chart\",\r\n      data: [0, 0],\r\n      backgroundColor: [\"rgba(75, 192, 192, 0.2)\", \"rgba(255, 99, 132, 0.2)\"],\r\n      borderColor: [\"rgba(75, 192, 192)\", \"rgba(255, 99, 132)\"],\r\n      borderWidth: 1,\r\n    },\r\n  ],\r\n};\r\nexport default function History() {\r\n  const [currentRules, setCurrentRules] = useState([]);\r\n  const [datasets, setDatasets] = useState(defaultDatasets);\r\n  const { uuid } = useContext(UuidContext);\r\n\r\n  const [rules, setRules] = useState([]);\r\n  const handleChange = async (value, event) => {\r\n    setCurrentRules(value);\r\n    /** Get history data */\r\n    if (currentRules) {\r\n      const url = `/getTweets?uuid=${uuid}&rules=${value}`;\r\n      let good = 0;\r\n      let bad = 0;\r\n      await axios.get(url).then((res) => {\r\n        res.data.data[0].data.forEach((e) => {\r\n          if (e.sentimentData >= 0) {\r\n            good += 1;\r\n          } else {\r\n            bad += 1;\r\n          }\r\n        });\r\n        setDatasets({\r\n          labels: [\"Good\", \"Bad\"],\r\n          datasets: [\r\n            {\r\n              label: \"Sentiment Bar Chart\",\r\n              data: [good, bad],\r\n              backgroundColor: [\r\n                \"rgba(75, 192, 192, 0.2)\",\r\n                \"rgba(255, 99, 132, 0.2)\",\r\n              ],\r\n              borderColor: [\"rgba(75, 192, 192)\", \"rgba(255, 99, 132)\"],\r\n              borderWidth: 1,\r\n            },\r\n          ],\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleOnClick = async () => {\r\n    const url = `/getAllRules?uuid=${uuid}`;\r\n    axios.get(url).then((res) => {\r\n      // console.log(res);\r\n      setRules(res.data);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Row>\r\n        <Col md={12}>\r\n          <SelectPicker\r\n            data={rules.rules}\r\n            block\r\n            onChange={handleChange}\r\n            onClick={handleOnClick}\r\n          />\r\n        </Col>\r\n      </Row>\r\n      <Bar data={datasets} />\r\n    </Container>\r\n  );\r\n}\r\n","import \"./App.css\";\r\nimport { useState, useContext } from \"react\";\r\nimport { RawTweets } from \"./component/rawTweets/rawTweets\";\r\nimport { Container, Tab, Tabs } from \"react-bootstrap\";\r\nimport History from \"./component/history/history\";\r\nimport { UuidContext } from \"./uuid/uuid\";\r\nfunction App() {\r\n  const [key, setKey] = useState(\"streaming\");\r\n  const { uuid, uuidError } = useContext(UuidContext);\r\n  return (\r\n    <div className=\"App\">\r\n      {/* <UuidContext.Provider value={{ uuid: uuid, error: error }}> */}\r\n      <Container className=\"header\">\r\n        <img src=\"./twitter-logo.png\" alt=\"twitter-logo\" />\r\n        <h1>Real Time Tweet Streamer</h1>\r\n        <h4>by Trong Dat Nguyen & Quoc Huy Nguyen</h4>\r\n\r\n        <Tabs\r\n          id=\"controlled-tab-example\"\r\n          activeKey={key}\r\n          onSelect={(k) => setKey(k)}\r\n          className=\"mb-3\"\r\n        >\r\n          <Tab eventKey=\"streaming\" title=\"Streaming\">\r\n            <RawTweets />\r\n          </Tab>\r\n          <Tab eventKey=\"history\" title=\"History\">\r\n            {uuid ? <History /> : null}\r\n          </Tab>\r\n        </Tabs>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { UuidProvider } from \"./uuid/uuid\";\r\nimport \"rsuite/dist/rsuite.min.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <UuidProvider>\r\n      <App />\r\n    </UuidProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}