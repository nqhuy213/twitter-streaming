{"version":3,"sources":["../../../src/filter-service/services/registerStreamService.js"],"names":["io","require","naturalAnalyseText","registerStreamService","url","app","socket","on","console","log","data","matchingRules","matching_rules","map","r","id","db","Stream","find","socketId","$in","clientConnectionIds","allStream","stream","rules","streamRule","includes","text","then","sentimentData","sentiment","tweetId","createdTime","Date","created_at","getTime","History","updateOne","clientId","$all","rule","value","$size","length","$push","to","emit","reason","module","exports"],"mappings":"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","sourcesContent":["const io = require(\"socket.io-client\");\r\nconst naturalAnalyseText = require(\"../analysis/naturalAnalysis\");\r\n\r\nfunction registerStreamService(url, app) {\r\n  const socket = io(url);\r\n  socket.on(\"connect\", () => {\r\n    console.log(\"Stream socket connected\");\r\n  });\r\n  socket.on(\"connect_failed\", function () {\r\n    console.log(\"Connection Failed\");\r\n  });\r\n  socket.on(\"data\", async (data) => {\r\n    /** Handle incoming tweet */\r\n    const matchingRules = data.matching_rules.map((r) => r.id);\r\n    /** Query database stream that has matching rules */\r\n    const allStream = await app.db.Stream.find({\r\n      socketId: { $in: [...app.clientConnectionIds] },\r\n    });\r\n\r\n    for (const stream of allStream) {\r\n      for (const streamRule of stream.rules) {\r\n        if (matchingRules.includes(streamRule.id)) {\r\n          /** Natural analysis is here */\r\n          /** Send data to that streaming client socket */\r\n          // let sentimentData = await naturalAnalyseText(data.data.text);\r\n\r\n          /** Save historical data into database */\r\n          naturalAnalyseText(data.data.text).then(async (sentimentData) => {\r\n            const sentiment = {\r\n              tweetId: data.data.id,\r\n              // text:\r\n              sentimentData: sentimentData,\r\n              createdTime: new Date(data.data.created_at).getTime(),\r\n            };\r\n\r\n            /** Updating history data in database */\r\n            app.db.History.updateOne(\r\n              {\r\n                clientId: stream.clientId,\r\n                rules: {\r\n                  $all: stream.rules.map((rule) => rule.value),\r\n                  $size: stream.rules.length,\r\n                },\r\n              },\r\n              { $push: { data: sentiment } }\r\n            ).then(() => {\r\n              app.io\r\n                .to(stream.socketId)\r\n                .emit(\"data\", { data: data, sentiment: sentiment });\r\n            });\r\n          });\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  });\r\n  socket.on(\"disconnect\", (reason) => {\r\n    console.log(\"Disconnected from Stream service.\");\r\n  });\r\n}\r\n\r\nmodule.exports = registerStreamService;\r\n"],"file":"registerStreamService.js"}