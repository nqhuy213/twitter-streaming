{"version":3,"sources":["../../../src/filter-service/socket/client.js"],"names":["io","require","connectToServer","url","app","socket","on","console","log","data","matchingRules","matching_rules","map","r","id","db","Stream","find","socketId","$in","clientConnectionIds","allStream","stream","rules","streamRule","includes","to","emit","module","exports"],"mappings":";;;;;;;;;;;;;;;;AAAA,IAAMA,EAAE,GAAGC,OAAO,CAAC,kBAAD,CAAlB;;AACA,SAASC,eAAT,CAAyBC,GAAzB,EAA8BC,GAA9B,EAAmC;AACjC,MAAMC,MAAM,GAAGL,EAAE,CAACG,GAAD,CAAjB;AACAE,EAAAA,MAAM,CAACC,EAAP,CAAU,SAAV,EAAqB,YAAM;AACzBC,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACD,GAFD;AAGAH,EAAAA,MAAM,CAACC,EAAP,CAAU,MAAV;AAAA,6FAAkB,iBAAOG,IAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAChB;AACMC,cAAAA,aAFU,GAEMD,IAAI,CAACE,cAAL,CAAoBC,GAApB,CAAwB,UAACC,CAAD;AAAA,uBAAOA,CAAC,CAACC,EAAT;AAAA,eAAxB,CAFN;AAGhB;;AAHgB;AAAA,qBAIQV,GAAG,CAACW,EAAJ,CAAOC,MAAP,CAAcC,IAAd,CAAmB;AACzCC,gBAAAA,QAAQ,EAAE;AAAEC,kBAAAA,GAAG,sCAAMf,GAAG,CAACgB,mBAAV;AAAL;AAD+B,eAAnB,CAJR;;AAAA;AAIVC,cAAAA,SAJU;AAOhBd,cAAAA,OAAO,CAACC,GAAR,CAAYa,SAAZ;AAPgB,qDAQKA,SARL;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQLC,cAAAA,MARK;AAAA,sDASWA,MAAM,CAACC,KATlB;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AASHC,cAAAA,UATG;;AAAA,mBAURd,aAAa,CAACe,QAAd,CAAuBD,UAAU,CAACV,EAAlC,CAVQ;AAAA;AAAA;AAAA;;AAWV;AACAP,cAAAA,OAAO,CAACC,GAAR,CAAYgB,UAAZ;AACApB,cAAAA,GAAG,CAACJ,EAAJ,CAAO0B,EAAP,CAAUJ,MAAM,CAACJ,QAAjB,EAA2BS,IAA3B,CAAgC,MAAhC,EAAwClB,IAAxC;AAbU;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAlB;;AAAA;AAAA;AAAA;AAAA;AAmBAJ,EAAAA,MAAM,CAACC,EAAP,CAAU,YAAV,EAAwB,YAAM;AAC5BC,IAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ;AACD,GAFD;AAGD;;AAEDoB,MAAM,CAACC,OAAP,GAAiB3B,eAAjB","sourcesContent":["const io = require(\"socket.io-client\");\r\nfunction connectToServer(url, app) {\r\n  const socket = io(url);\r\n  socket.on(\"connect\", () => {\r\n    console.log(\"Stream socket connected\");\r\n  });\r\n  socket.on(\"data\", async (data) => {\r\n    /** Handle incoming tweet */\r\n    const matchingRules = data.matching_rules.map((r) => r.id);\r\n    /** Query database stream that has matching rules */\r\n    const allStream = await app.db.Stream.find({\r\n      socketId: { $in: [...app.clientConnectionIds] },\r\n    });\r\n    console.log(allStream);\r\n    for (const stream of allStream) {\r\n      for (const streamRule of stream.rules) {\r\n        if (matchingRules.includes(streamRule.id)) {\r\n          /** Send data to that streaming client socket */\r\n          console.log(streamRule);\r\n          app.io.to(stream.socketId).emit(\"data\", data);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  });\r\n  socket.on(\"disconnect\", () => {\r\n    console.log(\"Disconnected from Stream service.\");\r\n  });\r\n}\r\n\r\nmodule.exports = connectToServer;\r\n"],"file":"client.js"}