{"version":3,"sources":["../../../src/filter-service/socket/createSocketServer.js"],"names":["require","getMyOwnRules","deleteRules","getRedisKey","connections","Set","createSocketServer","server","app","io","console","log","clientConnectionIds","on","socket","add","id","clientId","keywords","redisClient","del","ownRules","Stream","db","newStream","socketId","rules","save","History","findOne","map","keyword","history","newHistory","findOneAndDelete","then","deletedStream","res","err","stream","message","deregisterAllSockets","size","disconnect","module","exports"],"mappings":"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","sourcesContent":["const { getMyOwnRules, deleteRules } = require(\"../../libs/api\");\r\nconst getRedisKey = require(\"../redis/getRedisKey\");\r\n\r\n//global set\r\nconst connections = new Set();\r\n/** Socket to handle incoming connections from clients.\r\n * Create a socket server that receive streaming event\r\n * from clients and handle logic.\r\n */\r\nfunction createSocketServer(server, app) {\r\n  const io = require(\"socket.io\")(server);\r\n  console.log(\"---- Creating Socket Server ----\");\r\n  app.io = io;\r\n  app.clientConnectionIds = new Set();\r\n  console.log(\"---- Socket server created ----\");\r\n  io.on(\"connection\", (socket) => {\r\n    connections.add(socket);\r\n    app.clientConnectionIds.add(socket.id);\r\n    console.log(`Socket ${socket.id} connected.`);\r\n    /** Send client ID along with the keywords */\r\n    socket.on(\"streaming\", async ({ clientId, keywords }) => {\r\n      /** Flush all history from the redis client */\r\n      app.redisClient.del(getRedisKey(clientId));\r\n      /** Store socket and keywords in db */\r\n      const ownRules = await getMyOwnRules(keywords);\r\n      const Stream = app.db.Stream;\r\n      const newStream = new Stream({\r\n        socketId: socket.id,\r\n        rules: ownRules,\r\n        clientId: clientId,\r\n      });\r\n      await newStream.save();\r\n\r\n      /** Store the client Id with its rules in the History Model */\r\n      const history = await app.db.History.findOne({\r\n        clientId: clientId,\r\n        rules: keywords.map((keyword) => keyword + \" lang:en\"),\r\n      });\r\n      /** Already exists in the database*/\r\n      if (history) {\r\n        history.rules = [\r\n          ...new Set([\r\n            ...history.rules,\r\n            ...keywords.map((keyword) => keyword + \" lang:en\"),\r\n          ]),\r\n        ];\r\n        await history.save();\r\n      } else {\r\n        /** Not exists, create new one */\r\n        const newHistory = new app.db.History({\r\n          clientId: clientId,\r\n          rules: keywords.map((keyword) => keyword + \" lang:en\"),\r\n        });\r\n        await newHistory.save();\r\n      }\r\n    });\r\n\r\n    socket.on(\"disconnect\", async function () {\r\n      connections.delete(socket);\r\n      app.clientConnectionIds.delete(socket.id);\r\n      /** Delete in database */\r\n      app.db.Stream.findOneAndDelete({\r\n        socketId: socket.id,\r\n      }).then((deletedStream) => {\r\n        if (deletedStream !== null) {\r\n          deleteRules(deletedStream.rules)\r\n            .then((res) => {\r\n              console.log(`To delete ${deletedStream.socketId}`);\r\n\r\n              /** Delete rules in Twitter */\r\n\r\n              console.log(`Socket ${socket.id} disconnected`);\r\n            })\r\n            .catch((err) => {\r\n              throw err;\r\n            });\r\n        }\r\n      });\r\n    });\r\n    socket.on(\"deleteRules\", async function () {\r\n      /** Delete in database */\r\n      app.db.Stream.findOne({\r\n        socketId: socket.id,\r\n      })\r\n        .then((stream) => {\r\n          if (stream.rules !== []) {\r\n            deleteRules(stream.rules).then((res) => {\r\n              if (!res.message) {\r\n                console.log(\"Delete rules!\");\r\n              }\r\n            });\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    });\r\n  });\r\n}\r\n\r\nfunction deregisterAllSockets() {\r\n  if (connections.size > 0) {\r\n    console.log(\"---- Deregister all sockets ----\");\r\n    for (const socket of connections) {\r\n      socket.disconnect();\r\n\r\n      connections.delete(socket);\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = { createSocketServer, deregisterAllSockets };\r\n"],"file":"createSocketServer.js"}