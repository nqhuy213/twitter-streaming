{"version":3,"sources":["../../../src/filter-service/controller/index.js"],"names":["require","getMyOwnRules","getRules","deleteRules","addRules","successResponse","errorResponse","uuidv4","v4","getRedisKey","Controller","app","req","res","next","body","keywords","socket","ownRules","newStream","db","Stream","rules","save","message","results","data","response","add","error","deleted","status","send","err","uuid","query","redisKey","redisClient","get","result","resultJSON","JSON","parse","json","History","find","clientId","length","setex","stringify","source","map","label","replace","value","console","log","split","module","exports"],"mappings":"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","sourcesContent":["const {\r\n  getMyOwnRules,\r\n  getRules,\r\n  deleteRules,\r\n  addRules,\r\n} = require(\"../../libs/api\");\r\nconst { successResponse, errorResponse } = require(\"../../libs/utils\");\r\nconst { v4: uuidv4 } = require(\"uuid\");\r\nconst getRedisKey = require(\"../redis/getRedisKey\");\r\n\r\nclass Controller {\r\n  constructor(app) {\r\n    this.app = app;\r\n  }\r\n\r\n  searchTweets = async (req, res, next) => {\r\n    try {\r\n      const { keywords, socket } = req.body;\r\n      // console.log(keywords);\r\n      const ownRules = await getMyOwnRules(keywords);\r\n\r\n      /** Store the socket with the specific rules */\r\n      const newStream = new this.app.db.Stream({ socket, rules: ownRules });\r\n      await newStream.save();\r\n      successResponse(res, { ownRules });\r\n    } catch (error) {\r\n      errorResponse(res, 500, error.message);\r\n    }\r\n  };\r\n\r\n  getStreamRules = async (req, res, next) => {\r\n    try {\r\n      const rules = await getRules();\r\n      successResponse(res, { results: rules.data ? rules.data : [] });\r\n    } catch (error) {\r\n      errorResponse(res, 500, error.message);\r\n    }\r\n  };\r\n\r\n  addStreamRules = async (req, res, next) => {\r\n    try {\r\n      const { rules } = req.body;\r\n      const response = addRules(rules);\r\n      successResponse(res, { add: response });\r\n    } catch (error) {\r\n      errorResponse(res, 500, error.message);\r\n    }\r\n  };\r\n\r\n  //delete rules\r\n  deleteStreamRules = async (req, res, next) => {\r\n    try {\r\n      const { rules } = req.body;\r\n      const response = await deleteRules(rules);\r\n      successResponse(res, { deleted: response });\r\n    } catch (error) {\r\n      errorResponse(res, 500, error.message);\r\n    }\r\n  };\r\n\r\n  getUserId = (req, res, next) => {\r\n    try {\r\n      //create uuid and send back to client\r\n      return res.status(200).send(uuidv4());\r\n    } catch (err) {\r\n      //if error\r\n      return res\r\n        .status(400)\r\n        .send({ message: \"Failed to create UUID\", error: true });\r\n    }\r\n  };\r\n\r\n  getAllRules = async (req, res, next) => {\r\n    const uuid = req.query.uuid;\r\n    //redis key\r\n    const redisKey = getRedisKey(uuid);\r\n\r\n    //try get data from redis\r\n    return this.app.redisClient.get(redisKey, async (err, result) => {\r\n      //if there is result\r\n      if (result) {\r\n        const resultJSON = JSON.parse(result);\r\n        return res.status(200).json(resultJSON);\r\n      } else {\r\n        //else get from mongo\r\n        const data = await this.app.db.History.find({ clientId: uuid });\r\n        if (data.length > 0) {\r\n          this.app.redisClient.setex(\r\n            redisKey,\r\n            3600,\r\n            JSON.stringify({\r\n              source: \"Redis Cache\",\r\n              clientId: data[0].clientId,\r\n              rules: data.map((data) => ({\r\n                label: data.rules.map((data) => data.replace(\" lang:en\", \" \")),\r\n                value: data.rules,\r\n              })),\r\n            })\r\n          );\r\n          return res.status(200).json({\r\n            source: \"MongoDB\",\r\n            clientId: data[0].clientId,\r\n            rules: data.map((data) => ({\r\n              label: data.rules.map((data) => data.replace(\" lang:en\", \" \")),\r\n              value: data.rules,\r\n            })),\r\n          });\r\n        } else {\r\n          res.status(200).json({\r\n            source: null,\r\n            rules: [],\r\n          });\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  getTweets = async (req, res, next) => {\r\n    //uuid\r\n    const uuid = req.query.uuid;\r\n    const rules = req.query.rules;\r\n    //redis key\r\n    const redisKey = getRedisKey(`${uuid}-${rules}`);\r\n\r\n    console.log(rules.split(\",\"));\r\n    //try get data from redis\r\n    return this.app.redisClient.get(redisKey, async (err, result) => {\r\n      //if there is result\r\n      if (result) {\r\n        const resultJSON = JSON.parse(result);\r\n        return res.status(200).json(resultJSON);\r\n      } else {\r\n        //else get from mongo\r\n        const data = await this.app.db.History.find({\r\n          clientId: uuid,\r\n          rules: rules.split(\",\"),\r\n        });\r\n        console.log(data);\r\n        if (data.length > 0) {\r\n          this.app.redisClient.setex(\r\n            redisKey,\r\n            3600,\r\n            JSON.stringify({\r\n              source: \"Redis Cache\",\r\n              data,\r\n            })\r\n          );\r\n        }\r\n        return res.status(200).json({\r\n          source: \"MongoDB\",\r\n          data,\r\n        });\r\n      }\r\n    });\r\n  };\r\n}\r\n\r\nmodule.exports = Controller;\r\n"],"file":"index.js"}